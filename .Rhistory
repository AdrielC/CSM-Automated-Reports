install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
round(1.5)
round(1.49)
x <- mtcars
str(x)
z <- c(1,2,3,4,5,1,3,4,12,1,2,51,5,3,13,461,351,23541,23,2,12,1234,1235,61,7,9,8765431,3,546,7,54,5)
mean(z)
hist(z)
z <- c(1,2,3,4,5,1,3,4,12,1,2,51,5,3,13,461,351,23541,23,2,12,1234,1235,61,7,9,3,546,7,54,5)
hist(z)
z <- c(1,2,3,4,5,1,3,4,12,1,2,51,5,3,13,461,351,21,23,2,12,1234,1235,61,7,9,3,546,7,54,5)
hist(z)
z <- c(1,2,3,4,5,1,3,4,12,1,2,51,5,3,13,461,351,21,23,2,12,34,35,61,7,9,3,546,7,54,5)
hist(z)
z <- c(1,2,3,4,5,1,3,4,12,1,2,51,5,3,13,46,35,21,23,2,12,34,35,61,7,9,3,56,7,54,5)
hist(z)
logic <- c(T,F,T,F,T,T,T,F,F)
logic <- c(T,F,T,F,T,T,T,F,F)
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao
lmao <- c("I", "AM", "IN", "CLASS")
lmao
lmao[1,]
lmao[1]
lmao[2]
lmao[3]
mtcars
mtcars[,2]
mtcars[2,]
100/20 & sqrt(25) == 5
100/20 & sqrt(25) == 5
100/20 | sqrt(25) == 5
100/21 | sqrt(25) == 5
100/20 | sqrt(25) == 5
c(T, T, F) & c(F, F, T)
c(T, T, F) & c(F, F, F)
c(F, F, F) & c(F, F, F)
c(T, F, F) & c(T, F, F)
c(T, F, F) & c(T, F, T)
c(T, F, F) | c(T, F, T)
nth_power <- function(x,n){
lowe <- x^n
}
lmao <- nth_power(2,2)
lmao
nth_power <- function(x,n){
x^n
}
lmao <- nth_power(2,2)
lmao1 <- nth_power(2,2)
z_score <- function(x, data){
Z <- (x - mean(data))/sd(data)
return(Z)
}
data <- c(1,2,3,4,5,6,7,8,9,10,2,6,2,7,8,3,7,8,2,8,2,8,2,8,3,3,4)
z_score(4, data)
?include
?include
??include
?logical
logical(1)
logical(2)
logical(3)
logical(4)
logical(5)
library(rprojroot)
?rprojroot::
?rprojroot
library(sf)
installe.packages("sf")
install.packages("sf")
?sf
library(magick)
install.packages("magick")
library(tidyverse)
root <- find_rstudio_root_file()
??getHour
unclass(Uber.data$Date.time)
Uber.data1 <- read.csv('http://math.montana.edu/ahoegh/teaching/stat408/datasets/UberMay2014.csv')
Uber.data <- Uber.data1
library(ggplot2)
library(gdata)
Uber.data$Date.Time <- as.POSIXct(Uber.data1$Date.Time, format="%m/%d/%Y %H:%M:%S")
str(Uber.data)
unclass(Uber.data$Date.time)
View(Uber.data)
View(Uber.data)
Uber.data$Date.time
Uber.data$Date.time
Uber.data$Date.Time
unclass(Uber.data$Date.Time)
unclass(Uber.data$Date.Time)
Uber.data$Date.Time <- as.POSIXlt(Uber.data1$Date.Time, format="%m/%d/%Y %H:%M:%S")
View(Uber.data)
str(Uber.data)
unclass(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = getHour(Date.Time$hour))) +
geom_density() +
facet_grid(.~Day) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = getHour(Date.Time))) +
geom_density() +
facet_grid(.~Day) +
ggtitle("Density of Uber Rides by Hour for Each Day")
class(Uber.data$Date.Time[1])
Uber.data$Date.Time$hour
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density() +
facet_grid(.~Day) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density() +
facet_grid(.~Day) +
ggtitle("Density of Uber Rides by Hour for Each Day")
weekdays(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = weekdays(Uber.data$Date.Time))) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = weekdays(Uber.data$Date.Time))) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density(col = weekdays(Uber.data$Date.Time)) +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time), col = weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour)) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = Day)) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = as.factorDay)) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = as.factor(Day))) +
geom_density() +
facet_grid(.~weekdays(Uber.data$Date.Time)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
View(Uber.data)
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density() +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = .5) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = .2) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = .1) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = .7) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.7) +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
library(dplyr)
library(tidyr)
library(RecordLinkage)
rm(list = ls())
setwd("~/MAIN/BCC/Club data/rosters/")
file_list <- list.files()
for (file in file_list){
# if the merged master.club doesn't exist, create it
if (!exists("master.club")){
master.club <- read.csv(file, header=TRUE, sep=",")
master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
}
# if the merged master.club does exist, append to it
if (exists("master.club")){
temp_master.club <-read.csv(file, header=TRUE, sep=",")
temp_master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
master.club<-rbind(master.club, temp_master.club)
rm(temp_master.club)
}
}
setwd("~/MAIN/BCC/Club data")
attendees <- (df <- read.csv("club event report.csv", header = T)) %>%
extract(Kiosk.Swipe.Log..student, c("FirstName", "LastName"), "([^ ]+) (.*)") ### No idea how this RegEx works...
attendees$Kiosk.Swipe.Log..student <- (df <- read.csv("club event report.csv", header = T)) %>%
.$Kiosk.Swipe.Log..student
attendees$name <- NA
for(i in 1:nrow(attendees)){
attendees[i,"name"] <- paste(attendees[i, "FirstName"], tail(unlist(strsplit(attendees[i,"LastName"], " ")), n = 1))
}
master.club$name <- NA
master.club$Last.Name <- as.character(master.club$Last.Name)
master.club$First.Name <- as.character(master.club$First.Name)
for(x in 1:nrow(master.club)){
master.club[x,"name"] <- paste(master.club[x, "First.Name"], tail(unlist(strsplit(master.club[x,"Last.Name"], " ")), n = 1))
}
non.members <- subset(attendees, !(attendees$name %in% master.club$name)) %>%
filter(LastName != "NA")
write.csv(non.members, "non-member event attendees.csv")
