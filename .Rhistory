facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data <- read.csv('http://math.montana.edu/ahoegh/teaching/stat408/datasets/UberMay2014.csv')
library(ggplot2)
library(gdata)
Uber.data$Date.Time <- as.POSIXlt(Uber.data$Date.Time, format="%m/%d/%Y %H:%M:%S")
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data$Date.Time <- as.POSIXlt(Uber.data$Date.Time, format="%m/%d/%Y %H:%M:%S")
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data <- read.csv('http://math.montana.edu/ahoegh/teaching/stat408/datasets/UberMay2014.csv')
library(ggplot2)
library(gdata)
Uber.data$Date.Time <- as.POSIXlt(Uber.data$Date.Time, format="%m/%d/%Y %H:%M:%S")
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
source('~/.active-rstudio-document', echo=TRUE)
View(Uber.data)
Uber$Weekday <- factor(Uber$Weekday, levels= c("Sunday", "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
Uber.data$Weekday <- factor(Uber.data$Weekday, levels= c("Sunday", "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
Uber.data[order(Uber.data$Weekday), ]
View(Uber.data)
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data[order(Uber.data$Day),]
Uber.data <- Uber.data[order(Uber.data$Day),]
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~Weekday) +
ggtitle("Density of Uber Rides by Hour for Each Day")
Uber.data <- Uber.data[order(Uber.data$Day),]
View(Uber.data)
ggplot(Uber.data, aes(x = Date.Time$hour, col = Weekday)) +
geom_density() +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density() +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
?hour
library(libridate)
install.packages(lubridate)
install.packages("lubridate")
library(libridate)
library(lubridate)
Uber.data$Hour <- hour(Uber.data$Date.Time)
ggplot(Uber.data, aes(x = Date.Time$Hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
View(Uber.data)
Uber.data$Date.Time <- as.POSIXlt(Uber.data$Date.Time, format="%m/%d/%Y %H:%M:%S")
Uber.data$Date.Time <- as.POSIXlt(Uber.data$Date.Time, format="%m/%d/%Y %H:%M:%S")
Uber.data$Weekday <- weekdays(Uber.data$Date.Time)
Uber.data <- Uber.data[order(Uber.data$Day),]
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
scale_x_datetime(labels = "%S:00")
ggplot(Uber.data, aes(x = Date.Time, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
scale_x_datetime(labels = "%S:00")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day")
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=45))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="black",
size=14, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="black",
size=10, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=90),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="#993333",
size=10, angle=90),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
ggplot(Uber.data, aes(x = Date.Time$hour, fill = Weekday)) +
geom_density(alpha = 0.5) +
facet_grid(.~reorder(Weekday, Day)) +
ggtitle("Density of Uber Rides by Hour for Each Day") +
theme(axis.text.x = element_text(face="bold", color="black",
size=10, angle=90),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
library(norm)
rm(list = ls())
library(fcuk)
library(ggplot2)
library(MASS)
library(dplyr)
library(RGoogleAnalytics)
install.packages("RGoogleAnalytics")
setwd("~/MAIN/Giant/Clients/CardioMems")
token <- Auth("992211492004-p7melvhcdt081i26dpojf7bjh28co6al.apps.googleusercontent.com", "0B7-3WnbUiDZqz4jpW9a15Ed")
library(RGoogleAnalytics)
setwd("~/MAIN/Giant/Clients/CardioMems")
token <- Auth("992211492004-p7melvhcdt081i26dpojf7bjh28co6al.apps.googleusercontent.com", "0B7-3WnbUiDZqz4jpW9a15Ed")
library(dplyr)
library(tidyr)
library(RecordLinkage)
rm(list = ls())
setwd("~/MAIN/BCC/Club data/rosters/")
file_list <- list.files()
for (file in file_list){
# if the merged master.club doesn't exist, create it
if (!exists("master.club")){
master.club <- read.csv(file, header=TRUE, sep=",")
master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
}
# if the merged master.club does exist, append to it
if (exists("master.club")){
temp_master.club <-read.csv(file, header=TRUE, sep=",")
temp_master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
master.club<-rbind(master.club, temp_master.club)
rm(temp_master.club)
}
}
setwd("~/MAIN/BCC/Club data")
library(RecordLinkage)
rm(list = ls())
setwd("~/MAIN/BCC/Club data/rosters/")
file_list <- list.files()
for (file in file_list){
# if the merged master.club doesn't exist, create it
if (!exists("master.club")){
master.club <- read.csv(file, header=TRUE, sep=",")
master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
}
# if the merged master.club does exist, append to it
if (exists("master.club")){
temp_master.club <-read.csv(file, header=TRUE, sep=",")
temp_master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
master.club<-rbind(master.club, temp_master.club)
rm(temp_master.club)
}
}
setwd("~/MAIN/BCC/Club data")
attendees <- read.csv('attendeeReport.csv', header = T)
source('~/MAIN/BCC/Club data/ClubReportMaster1.R')
View(attendees)
View(master.club)
View(master.club)
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(LastName != "NA")
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(Email != "NA")
View(non.members)
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(Email != "NA") %>%
filter(Name != "")
View(non.members)
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(Email != "NA") %>%
filter(Name != "") %>%
.[,c("Event.title", "Club", "Date", "Name", "Email")]
View(non.members)
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(Email != "NA" & Name != "") %>%
filter(Email != "") %>%
.[,c("Event.title", "Club", "Date", "Name", "Email")]
View(non.members)
write.csv(non.members, "non-member event attendees.csv")
Uber.data <- read.csv('http://math.montana.edu/ahoegh/teaching/stat408/datasets/UberMay2014.csv')
View(Uber.data)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
array3 <- array(c('red','blue','green','yellow','white','orange'), dim=c(3,3,6))
array3
for (side in array3):
for (side in array3){
print(side)
}
array4 <- array(c('red','red','red','red','red','red'), dim=c(3,3,3))
isTRUE(array4)
isTRUE(array4[,,1])
isTRUE(c(1,1,1,1))
isTRUE(c(1))
isTRUE(length(unique(object))==1)
isTRUE(length(uniquec(1,2,3,4)))==1)
isTRUE(length(uniquec(1,2,3,4))==1)
isTRUE(length(unique(c(1,2,3,4)))==1)
isTRUE(length(unique(c(1,1,1,1)))==1)
isTRUE(length(unique(array4))==1)
for (side in 1:6){
isTRUE(length(unique(array4))==1)
}
for (side in 1:6){
isTRUE(length(unique(array4[,,side]))==1)
}
for (side in 1:6){
isTRUE(length(unique(array4[,side]))==1)
}
for (side in 1:6){
isTRUE(length(unique(array4[side]))==1)
}
for (side in 1:6){
print(isTRUE(length(unique(array4[side]))==1))
}
print(isTRUE(length(unique(array3[side]))==1))
for (side in 1:6){
print(isTRUE(length(unique(array3[side]))==1))
}
print(isTRUE(length(unique(array3[,,side]))==1))
for (side in 1:6){
print(isTRUE(length(unique(array3[,,side]))==1))
}
print(isTRUE(length(unique(array4[,,side]))==1))
for (side in 1:6){
print(isTRUE(length(unique(array4[,,side]))==1))
}
array4 <- array(c('red','red','red','red','red','red'), dim=c(3,3,6))
for (side in 1:6){
print(isTRUE(length(unique(array4[,,side]))==1))
}
for (side in 1:6){
print(isTRUE(length(unique(array4[,,side]))==1))
}
array4 <- array(c('red','red','red','red','red','red'), dim=c(3,3,6))
array5 <- array(rep(c('red','blue','green','yellow','white','orange'),each=9), dim=c(3,3,6))
array6 <- array(rep(c('duck','goose','eagle','crane','white','orange'),each=9), dim=c(3,3,6))
isTRUE(length(unique(c(1,1,1,1)))==1)
for (side in 1:6){
print(isTRUE(length(unique(array4[,,side]))==1))
}
for (side in 1:6){
print(isTRUE(length(unique(array4[,,side]))==1))
}
print(isTRUE(length(unique(array4[side]))==1))
for (side in 1:6){
print(isTRUE(length(unique(array4[side]))==1))
}
array4[,,4]
isTRUE(length(unique(array4[,,4]))==1)
list(array4[,,4])
as.list(array4[,,4])
isTRUE(length(unique(as.list(array4[,,4])))==1)
isTRUE(length(unique(as.list(array3[,,4])))==1)
isTRUE(length(unique(as.list(array4[,,4])))==1)
for (side in 1:6){
print(isTRUE(length(unique(as.list(array4[,,side])))==1))
}
print(isTRUE(length(unique(as.list(array3[,,side])))==1))
lmao <- c()
lmao <- c()
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array3[,,side])))==1))
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array3[,,side])))==1)
append(lmao, tmp)
}
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array3[,,side])))==1)
append(lmao, tmp)
}
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array3[,,side])))==1)
append(lmao, tmp)
}
tmp <- isTRUE(length(unique(as.list(array4[,,side])))==1)
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array4[,,side])))==1)
append(lmao, tmp)
}
?append
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array4[,,side])))==1)
lmao <- append(lmao, tmp)
}
NULL
NULL
NULL
NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array4[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(array4[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
rubiks <- function(){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks(array3)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks(array3)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
}
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks(array3)
rubiks(array4)
source('~/.active-rstudio-document', echo=TRUE)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks(array)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
rubiks(array)
rubiks(cube)
cube <- array(c('red','red','red','red','red','red'), dim=c(3,3,6))
rubiks(cube)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, T, F))
}
}
cube <- array(c('red','red','red','red','red','red'), dim=c(3,3,6))
rubiks(cube)
rubiks <- function(cube){
lmao <- NULL
for (side in 1:6){
tmp <- isTRUE(length(unique(as.list(cube[,,side])))==1)
lmao <- append(lmao, tmp)
return(ifelse(lmao == T, "This cube is a completed Rubik's cube",
"Try Again: cube is not a completed Rubik's cube"))
}
}
cube <- array(c('red','red','red','red','red','red'), dim=c(3,3,6))
rubiks(cube)
array1 <- array('red', dim=c(3,3,6))
array2 <- array(1:6, dim = c(3,3,6))
array3 <- array(c('red','blue','green','yellow','white','orange'), dim=c(3,3,6))
array4 <- array(c('red','blue','green','yellow','white','orange'), dim=c(3,3,3))
array5 <- array(rep(c('red','blue','green','yellow','white','orange'),each=9), dim=c(3,3,6))
array6 <- array(rep(c('duck','goose','eagle','crane','white','orange'),each=9), dim=c(3,3,6))
rubiks(array1)
rubiks(array2)
rubiks(array3)
rubiks(array4)
rubiks(array5)
rubiks(array6)
![Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
[Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
![Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
```{r,echo=FALSE}
![Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
![Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
![Misleading Graphic](https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/04/Fox-News-bar-chart.jpeg?resize=620%2C368&ssl=1)
```{r,echo=FALSE}
![Misleading Graphic](/Users/adriel/Desktop)
![Misleading Graphic](/Users/adriel/Desktop)
![Misleading Graphic](/Users/adriel/Desktop)
![Misleading Graphic](~/Desktop/lmao.jpeg)
library(dplyr)
library(tidyr)
library(RecordLinkage)
rm(list = ls())
setwd("~/MAIN/BCC/Club data/rosters/")
file_list <- list.files()
for (file in file_list){
# if the merged master.club doesn't exist, create it
if (!exists("master.club")){
master.club <- read.csv(file, header=TRUE, sep=",")
master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
}
# if the merged master.club does exist, append to it
if (exists("master.club")){
temp_master.club <-read.csv(file, header=TRUE, sep=",")
temp_master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
master.club<-rbind(master.club, temp_master.club)
rm(temp_master.club)
}
}
setwd("~/MAIN/BCC/Club data")
attendees <- read.csv('attendeeReport.csv', header = T)
non.members <- subset(attendees, !(attendees$Email %in% master.club$Email)) %>%
filter(Email != "NA" & Name != "") %>%
filter(Email != "") %>%
.[,c("Event.title", "Club", "Date", "Name", "Email")]
write.csv(non.members, "non-member event attendees.csv")
