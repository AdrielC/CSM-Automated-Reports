library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title Adriel Casellas BCC Analyst Tasks
section General Repeating
Data Slide Update             :active,        first_1,    2017-11-16, 1d
Data Slide Update 2           :               first_2,    2017-11-29, 2d
Data Slide Update 3           :               first_3,    2017-12-06, 2d
section Events Data
Data update for meeting       :crit, done,    import_1,   2017-11-06,24h
Finish Regression             :crit, active,  import_2,   after import_1, 2d
Event automation              :crit, active,  import_3,   2017-12-06, 3d
section Marketing Data
Club CL Dashboard             :active,        extras_1,   after import_3,  3d
Comms meeting                 :active,        extras_2,   2017-11-29, 3d
section Surveys
Student Event Survey          :active,        extras_1,   2017-11-20,  3d
Marketing Survey              :active,        extras_2,   after extras_1, 3d
Event Manager Survey          :crit, done     extras_3,   2017-11-09, 5d
Student Event Survey auto     :active,        extras_4,   2017-11-27,  5d
Marketing Survey auto         :active,        extras_5,   after extras_4, 5d
Event Manager Survey 2        :active,        extras_6,   after extras_5, 3d
section Marketing Presentation to Mike
Gather data                   :               mark_3,     2017-12-11, 3d
Create powerpoint             :crit,          mark_1,     2017-12-13, 2d
Present to Mike               :crit,          mark_2,     2017-12-15, 1d
Coordinate with Brandon       :               mark_4,     2017-12-01, 1d
Coordinate with Mike          :crit,          mark_5,     2017-12-03, 1d
")
a <- 1
a
a
a <- c(1,2,3,4,5,6)
a
a[1]
a[2]
a[5]
a[8]
a <- c(1,2,3,4,5,6,"2","4")
a
a
a
a
library(fcuk)
ifexists
myFunction <- function(x){ ### x should be a string
if(exists(x)){
print("lmao")
}
}
myFunction("lol")
myFunction("lol")
myFunction("lol")
myFunction <- function(x){ ### x should be a string
y <- x
if(exists(y)){
print("lmao")
}
}
myFunction("lol")
myFunction("lol")
exists(y)
exists(y)
exists(y)
exists(y)
exists
myFunction <- function(x){ ### x should be a string
print("lol")
}
myFunction("lol")
myFunction("lol")
myFunction()
myFunction(1)
myFunction <- function(x){ ### x should be a string
print("lol")
return(x)
}
myFunction(1)
myFunction <- function(x){ ### x should be a string
print("lol")
return(x)
}
myFunction(1)
myFunction(1)
source("~/MAIN/MA/Analytics Dojo/setup.R")
source("~/MAIN/MA/Analytics Dojo/setup.R")
source("~/MAIN/MA/Analytics Dojo/setup.R")
source("~/MAIN/MA/Analytics Dojo/setup.R")
source("~/MAIN/MA/Analytics Dojo/setup.R")
rm(list = ls())
setwd("~/MAIN/BCC/RESTReporting/")
if(!("easypackages" %in% installed.packages()[,"Package"])) install_packages("easypackages"); library(easypackages)
list.of.packages <- c("dplyr", "ggplot2","lubridate", "lazyeval", "scales", "fcuk", "RGoogleAnalytics", "ggfortify", "forecast", "fpp2", "ISLR", "leaps")
packages(list.of.packages, prompt = F)
SchoolYear <- function(data){
data[data$month > 8 | data$month < 5,]
}
iPads <- read.csv("~/MAIN/BCC/Club\ data/Full data/2017-2018\ Club\ Event\ Attendees.csv")
iPads$Date <- as.POSIXct(iPads$Information.Sesssion..Start.Date.Time, format = "%b %d, %Y, %I:%M %p")
iPads$SchoolYear <- ifelse(iPads$Date >= as.Date("2014-09-01") & iPads$Date < as.Date("2015-04-19"), "2014-2015",
ifelse(iPads$Date >= as.Date("2015-09-01") & iPads$Date < as.Date("2016-04-19"), "2015-2015",
ifelse(iPads$Date >= as.Date("2016-09-01") & iPads$Date < as.Date("2017-04-19"), "2016-2017",
ifelse(iPads$Date >= as.Date("2017-09-01") & iPads$Date < as.Date("2018-04-19"), "2017-2018",
"Spring/Summer"))))
iPads %>%
group_by(Information.Sesssion..Club.Event.Title) %>%
mutate(count = n()) %>% ungroup() -> iPads
iPads$iPad <- ifelse(iPads$count <= 3, "No", "Yes")
iPadsCurrent <- subset(iPads, SchoolYear == "2017-2018")
iPadsCurrent <- iPadsCurrent[!(iPadsCurrent$Date > Sys.time()),]
FullStudent <- read.csv("~/MAIN/BCC/Club\ data/Full\ Data/Full Student List **ADRIEL**.csv", header = T)
Attendees <- iPadsCurrent
colnames(Attendees) <- c("StudentName", "StartDate",
"Club", "ClubEventName",
"StudentID", "Email", "Date",
"SchoolYear", "count", "iPad.Used")
Attendees$Name <- as.character(Attendees$StudentName)
FullStudent$Name <- as.character(FullStudent$Name)
AttendeesFull <- left_join(Attendees, FullStudent, by = "Name")
Plots <- list()
tmpSub <- list()
countByEvents <- AttendeesFull %>%
filter(ClubEventName != "") %>% filter(Club != "") %>%
group_by(ClubEventName) %>%
summarise(Club = first(Club), Event = first(ClubEventName), AttendeeSum = n()) %>% ungroup()
countByEvents$AttendeeSum <- with(countByEvents, reorder(AttendeeSum, -AttendeeSum))
countByEvents$Event <- as.factor(as.character(countByEvents$Event))
countByEvents$AttendeeSum <- as.numeric(as.character(countByEvents$AttendeeSum))
setwd("/Volumes/share/Business Career Center/Operations Team/03 Brand Management/Brand Strategy/Adriel Casellas/Club data/PDF 11-14-17/Club Charts/")
source("~/MAIN/MA/Analytics Dojo/setup.R")
Q.Users2017 <- Init(table.id = "ga:107460317",
start.date = "2017-09-01", # GA will return data for the day before this date
end.date = as.Date(Sys.time()), # This returns the current date
metrics = "ga:users,ga:avgTimeOnPage, ga:sessions, ga:avgSessionDuration, ga:pageviews", # These are the site measurements you want to examine
dimensions = "ga:date", # This is your date column
segment = "sessions::condition::ga:exitPagePath=@events",
max.results = 10000)
ga.query <- QueryBuilder(Q.Users2017)
ga.df <- GetReportData(ga.query, token, split_daywise = T) # Set Split_daywise = True to get unsampled, true data for each day
ga.df <- ga.df[order(as.numeric(ga.df$date)),] # Reorder by date descending
AttendeesFull %>%
filter(ClubEventName != "") %>% filter(StudentName != "") %>%
group_by(date(Date)) %>%
summarise(AttendeeSum = n(), Date = first(StartDate)) %>% ungroup() -> countByDay
countByDay$Date <- as.POSIXct(countByDay$`date(Date)`, format = "%b %d, %Y, %I:%M %p")
countByDay <- countByDay[,-1]
ga.df$Date <- as.POSIXct(ga.df$date, format = "%Y%m%d")
ga.df$Date <- round_date(ga.df$Date, "day")
countByDay1 <- filter(countByDay, AttendeeSum > 3)
Joined <- left_join(ga.df, countByDay, by = "Date")
Joined1 <- left_join(ga.df, countByDay1, by = "Date")
par(mfrow=c(2,2))
plot(Joined$AttendeeSum, Joined$users)
plot(Joined$AttendeeSum, Joined$avgTimeOnPage)
plot(Joined$AttendeeSum, Joined$sessions)
hist(Joined$AttendeeSum)
par(mfrow=c(2,2))
plot(Joined1$AttendeeSum, Joined1$users)
plot(Joined1$AttendeeSum, Joined1$avgTimeOnPage)
plot(Joined1$AttendeeSum, Joined1$sessions)
hist(Joined1$AttendeeSum)
RegData <- select(Joined, users, avgTimeOnPage, sessions, avgSessionDuration, pageviews, AttendeeSum) %>%
subset(!(is.na(AttendeeSum)))
RegData1 <- select(Joined1, users, avgTimeOnPage, sessions, avgSessionDuration, pageviews, AttendeeSum)
RegData2 <- select(Joined1, users, avgTimeOnPage, sessions, avgSessionDuration, pageviews, AttendeeSum) %>%
subset(!(is.na(AttendeeSum)))
leap <- regsubsets(AttendeeSum~., data = RegData, nbest = 10)
leapsum <- summary(leap)
par(mfrow=c(1,1))
plot(leap, scale = 'adjr2')
mod <- lm(AttendeeSum ~ pageviews, data = RegData)
summary(mod)
modA <- anova(aov(AttendeeSum ~ avgSessionDuration + pageviews + avgSessionDuration*pageviews, data = RegData))
modA
ggplot(RegData, aes(x = pageviews, y = AttendeeSum)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle(label = "Club Event Attendance by Careerlaunch Pageviews")
ggplot(RegData, aes(x = pageviews, y = AttendeeSum)) +
geom_point() +
geom_smooth(method = "lm") +
ylab("lmao") +
ggtitle(label = "Club Event Attendance by Careerlaunch Pageviews")
ggplot(RegData, aes(x = pageviews, y = AttendeeSum)) +
geom_point() +
geom_smooth(method = "lm") +
ylab("Daily Club Event Attendees") +
xlab("CareerLaunch Pageviews from Events Pages") +
ggtitle(label = "Club Event Attendance by Careerlaunch Pageviews")
rm(list = ls())
setwd("~/MAIN/BCC/RESTReporting/")
if(!("easypackages" %in% installed.packages()[,"Package"])) install_packages("easypackages"); library(easypackages)
list.of.packages <- c("tidyr", "dplyr", "RecordLinkage")
packages(list.of.packages, prompt = F)
file_list <- list.files("./rosters/")
for (file in file_list){
## if the merged master.club doesn't exist, create it
if (!exists("master.club")){
master.club <- read.csv(paste0("./rosters/",file), header=TRUE, sep=",")
master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
}
## if the merged master.club does exist, append to it
if (exists("master.club")){
temp_master.club <-read.csv(paste0("./rosters/",file), header=TRUE, sep=",")
temp_master.club$club <- sprintf("%s", unlist(strsplit(file, ".", fixed = T)))[1]
master.club<-rbind(master.club, temp_master.club)
rm(temp_master.club)
}
}
master.club$club <- droplevels(as.factor(master.club$club))
Attendees <- read.csv("./BridgeREST/2017-2018 Club Event Attendees.csv")
View(Attendees)
source('~/.active-rstudio-document')
FullStudent <- read.csv("./../Club data/Full Data/2013-2018 Club Event Attendees **ADRIEL**.csv")
View(FullStudent)
FullStudent <- read.csv("./../Club data/Full Data/Full Student List **ADRIEL**.csv")
View(FullStudent)
FullStudent <- read.csv("./../Club data/Full Data/Full Student List **ADRIEL**.csv") %>% select(Student.ID, Major)
View(master.club)
View(FullStudent)
Attendees <- read.csv("./BridgeREST/2017-2018 Club Event Attendees.csv")
Attendees %>% subset(!(is.na(student..Student.ID))) %>% droplevels() -> Attendees
colnames(Attendees) <- c("StudentName", "EventDate", "club", "ClubEventName", "StudentID", "Email")
colnames(Attendees) <- c("StudentName", "EventDate", "club", "ClubEventName", "Student.ID", "Email")
View(Attendees)
FullStudent <- read.csv("./../Club data/Full Data/Full Student List **ADRIEL**.csv") %>% select(Student.ID, Major)
EconJoinAttendee <- left_join(Attendees, FullStudent, by="Student.ID")
str(Attendees)
str(FullStudent)
FullStudent$Student.ID <- as.numeric(FullStudent$Student.ID)
EconJoinAttendee <- left_join(Attendees, FullStudent, by="Student.ID")
View(master.club)
FullStudent <- read.csv("./../Club data/Full Data/Full Student List **ADRIEL**.csv")
View(FullStudent)
FullStudent <- read.csv("./../Club data/Full Data/Full Student List **ADRIEL**.csv") %>% select(Email, Major)
EconJoinAttendee <- left_join(Attendees, FullStudent, by="Email")
quiet
?quiet
suppress
EconJoinAttendee <- suppressWarnings(left_join(Attendees, FullStudent, by="Email"))
EconJoinAttendee <- suppressWarnings(left_join(master.club, FullStudent, by="Email"))
EconJoinAttendee <- suppressWarnings(left_join(master.club, FullStudent, by="Email"))
EconJoinMember <- suppressWarnings(left_join(master.club, FullStudent, by="Email"))
EconJoinAttendee <- suppressWarnings(left_join(Attendees, FullStudent, by="Email")) %>% .[which(Major="s"),]
EconJoinAttendee <- suppressWarnings(left_join(Attendees, FullStudent, by="Email")) %>% .[which(Major=="s"),]
EconJoinAttendee <- suppressWarnings(left_join(Attendees, FullStudent, by="Email")) %>% .[which(.$Major=="s"),]
View(EconJoinMember)
EconJoinAttendee <- suppressWarnings(left_join(Attendees, FullStudent, by="Email")) %>% .[which(.$Major=="Economics (No Emphasis)"),]
EconJoinMember <- suppressWarnings(left_join(master.club, FullStudent, by="Email")) %>% .[which(.$Major=="Economics (No Emphasis)"),]
View(EconJoinMember)
View(EconJoinAttendee)
Reports <- c(EconJoinAttendee, EconJoinMember)
lapply(1:length(Reports), function(i) write.csv(Reports[[i]],
file = paste0(names(clubReports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[[i]],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
Reports <- c(EconJoinAttendee, EconJoinMember)
Reports <- c(EconJoinAttendee, EconJoinMember)
Reports <- list(EconJoinAttendee, EconJoinMember)
lapply(1:length(Reports), function(i) write.csv(Reports[[i]],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
getwd()
names(Reports[2]
)
names(Reports[1])
names(Reports[2])
names(Reports[8])
Reports[8]
Reports[1]
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = paste0(names(Reports[i]), ".csv"),
row.names = FALSE))
length(Reports)
R
length(Reports)
names(Reports)
names(Reports[1])
names(Reports[2])
lapply(1:length(Reports), function(i) write.csv(Reports[i],
file = deparse(substitute(Reports[i])), ".csv"),
row.names = FALSE)
lapply(1:length(Reports), function(i) write.csv(Reports[i], file = deparse(substitute(Reports[i])), ".csv", row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i], file = deparse(substitute(Reports[i])), ".csv", row.names = FALSE))
lapply(1:length(Reports), function(i) write.csv(Reports[i], file = deparse(substitute(Reports[i])), ".csv", row.names = FALSE))
deparse(substitute(Reports[i]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute(Reports[1]))
deparse(substitute("Reports[1]"))
deparse(substitute("Reports[1]"))
lapply(1:length(Reports), function(i) write.csv(Reports[i], file = paste0(deparse(substitute(Reports[i])), ".csv"), row.names = FALSE))
Reports[1]
names(deparse(substitute(Reports[i])))
lapply(1:length(Reports), function(i) write.csv(Reports[i], file = paste0("EconStudentReport", i, ".csv"), row.names = FALSE))
setwd("~/MAIN/BCC/RESTReporting/RShiny Dashboards/") ### Set this to whatever directory you want
names(Report)
rm(list = ls())
if(!("easypackages" %in% installed.packages()[,"Package"])) install_packages("easypackages"); library(easypackages)
list.of.packages <- c("ggplot2", "dplyr", "fcuk", "RGoogleAnalytics", "ggfortify", "forecast", "fpp2")
packages(list.of.packages, prompt = F)
setwd("~/MAIN/BCC/RESTReporting/RShiny Dashboards/") ### Set this to whatever directory you want
source("GAsetup.R") # either source your athentication from another file if you want to keep your clientID and clientSecret secure, or follow the instructions below
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = ("Corporate Finance Club"|"Tina Ashby"),
ExDMC = ("Experience Design and Management Club (ExDMC)"|"RecManagement Assistant"|"Virginia Rosenthal"),
BYUFS = ("Finance Society"|"Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = ("Marketing Assistant"|"Marketing Association"|"Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = ("Corporate Finance Club"|"Tina Ashby"),
ExDMC = ("Experience Design and Management Club (ExDMC)"|"RecManagement Assistant"|"Virginia Rosenthal"),
BYUFS = ("Finance Society"|"Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = ("Marketing Assistant"|"Marketing Association"|"Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = ("Corporate Finance Club"|"Tina Ashby"),
ExDMC = ("Experience Design and Management Club (ExDMC)"|"RecManagement Assistant"|"Virginia Rosenthal"),
BYUFS = ("Finance Society"|"Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = ("Marketing Assistant"|"Marketing Association"|"Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = c("Corporate Finance Club"|"Tina Ashby"),
ExDMC = ("Experience Design and Management Club (ExDMC)"|"RecManagement Assistant"|"Virginia Rosenthal"),
BYUFS = ("Finance Society"|"Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = ("Marketing Assistant"|"Marketing Association"|"Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = c("Corporate Finance Club","Tina Ashby"),
ExDMC = ("Experience Design and Management Club (ExDMC)"|"RecManagement Assistant"|"Virginia Rosenthal"),
BYUFS = ("Finance Society"|"Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = ("Marketing Assistant"|"Marketing Association"|"Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
ClubAuthors <- list(BAS = "Accounting Society",
ALPFA = "ALPFA",
AIS = "Association for Information Systems",
BAP = "Beta Alpha Psi",
BSC = "Business Strategy Club",
CFC = c("Corporate Finance Club","Tina Ashby"),
ExDMC = c("Experience Design and Management Club (ExDMC)","RecManagement Assistant","Virginia Rosenthal"),
BYUFS = c("Finance Society","Private Banking Group"),
GSCA = "Global Supply Chain Association",
IMA = "Institute of Management Accountants",
IBC = "Investment Banking Club",
MCC = "Management Consulting Club",
MA = c("Marketing Assistant","Marketing Association","Mike Neuffer"),
BYUMC = "Markets Club",
NMSA = "Non-Profit Management Student Association",
PreMA = "Pre-Management Student Association (PreMa)",
PBC = "Private Banking Club",
PEVC = "Private Equity and Venture Capital Club",
REC = "Real Estate Club",
SHRM = "Society for Human Resource Management",
TRC = "Therapeutic Recreation Club",
WIB = "Women In Business Club",
WSOA = "Women of the School of Accountancy"
)
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title Adriel Casellas BCC Analyst Tasks
section General Data Update
Data Slide Update             :active,        first_1,    2017-11-16, 1d
Data Slide Update 2           :               first_2,    2017-11-29, 2d
Data Slide Update 3           :               first_3,    2017-12-06, 2d
section Events Data
Data update for meeting       :crit, done,    import_1,   2017-11-06,24h
Finish Regression             :crit, active,  import_2,   after import_1, 2d
Event automation              :crit, active,  import_3,   2017-12-06, 3d
section Marketing Data
Club CL Dashboard             :active,        extras_1,   after import_3,  3d
Comms meeting                 :active,        extras_2,   2017-11-29, 3d
section Surveys
Student Event Survey          :active,        extras_1,   2017-11-20,  3d
Marketing Survey              :active,        extras_2,   after extras_1, 3d
Event Manager Survey          :crit, done     extras_3,   2017-11-09, 5d
Student Event Survey auto     :active,        extras_4,   2017-11-27,  5d
Marketing Survey auto         :active,        extras_5,   after extras_4, 5d
Event Manager Survey 2        :active,        extras_6,   after extras_5, 3d
section Marketing Presentation to Mike
Gather data                   :               mark_3,     2017-12-11, 3d
Create powerpoint             :crit,          mark_1,     2017-12-13, 2d
Present to Mike               :crit,          mark_2,     2017-12-15, 1d
Coordinate with Brandon       :               mark_4,     2017-12-01, 1d
Coordinate with Mike          :crit,          mark_5,     2017-12-03, 1d
")
